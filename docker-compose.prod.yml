services:
  app:
    build:
      context: .
      dockerfile: docker/prod/Dockerfile
    image: tu-usuario/tu-app-laravel:latest # Reemplaza con tu nombre de imagen para Docker Hub/Render
    container_name: laravel-app-prod
    restart: unless-stopped
    environment:
      - APP_NAME=Laravel
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=https://tu-dominio.onrender.com # Reemplaza con tu URL de producción
      - LOG_CHANNEL=stderr # Render y otros servicios prefieren logs en la salida estándar
      - DB_CONNECTION=mysql
      - DB_HOST=db # Este será el nombre del servicio de DB en Render
      - DB_PORT=3306
      # Estas variables se deben configurar en el panel de Render, no aquí.
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    volumes:
      # En producción, el código ya está en la imagen. No se montan volúmenes de código.
      # Solo se podría montar un volumen para archivos persistentes si fuera necesario.
      # - ./storage:/var/www/html/storage # Ejemplo si necesitaras storage persistente
      - ./public:/var/www/html/public # Nginx necesita acceso a los assets públicos

  web:
    image: nginx:1.25-alpine
    container_name: webserver-prod
    restart: unless-stopped
    ports:
      # Este mapeo es para pruebas locales. Render lo ignora y usa la configuración de su panel.
      - "80:80"
      - "443:443"
    volumes:
      # El código de la app se comparte para que Nginx sirva los archivos estáticos
      - ./public:/var/www/html/public:ro # :ro significa solo lectura (read-only)
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app